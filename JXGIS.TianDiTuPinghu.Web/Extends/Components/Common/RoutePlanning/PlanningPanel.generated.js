// @hash v3-AB1ED98A5432173B140B734DA3E67E96A099DF1A
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:55
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlanningPanel = function (_React$Component) {
    _inherits(PlanningPanel, _React$Component);

    function PlanningPanel(props) {
        _classCallCheck(this, PlanningPanel);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PlanningPanel).call(this, props));

        _this.planningType = {
            drive: 1,
            bus: 0,
            walk: 2
        };

        _this.eventList = {
            startEndToggle: 'startEndToggle',
            planningTypeSelected: 'planningTypeSelected',
            startPointSetted: 'startPointSetted',
            endPointSetted: 'endPointSetted',
            quickSearchPanelToggled: 'quickSearchPanelToggled',
            quickSearchResultsSetted: 'quickSearchResultsSetted',
            resultPanelToggled: 'resultPanelToggled',
            allCleared: 'allCleared',
            tripModeSelected: 'tripModeSelected',
            routeResultSetted: 'routeResultSetted',
            buslineClick: 'buslineClick',
            busSublineClick: 'busSublineClick'
        };

        _this.tripMode = {
            lessTime: 1,
            lessTransfer: 2,
            lessWalk: 4,
            noSubway: 8,
            lessTime2: 0,
            lessDistance: 1,
            lessHighway: 2,
            onlyWalk: 3
        };

        _this.planning = {
            icons: {
                start: L.divIcon({ className: 'rt-icons-start', iconSize: [24, 42], iconAnchor: [12, 40], popupAnchor: [0, -40] }),
                end: L.divIcon({ className: 'rt-icons-end', iconSize: [24, 42], iconAnchor: [12, 40], popupAnchor: [0, -40] }),
                busStation: L.divIcon({ className: 'rt-icons-station', iconSize: [22, 21], popupAnchor: [0, -15] })
            },
            lineStyle: {
                lineDefault: {
                    color: '#f26161',
                    weight: 4
                },
                lineWalk: {
                    color: '#47a2fd',
                    weight: 5,
                    dashArray: '5,8'
                },
                activeLine: {
                    color: '#1eb739',
                    weight: 5
                }
            },
            map: _this.props.map.map,
            start: null,
            end: null,
            busLines: [],
            driveLine: null,
            stations: [],
            activeLine: null
        };

        _this.currentFocus = null;

        _this.state = {
            planningType: _this.planningType.drive, //drive,bus,walk
            tripMode: 0,
            start: {
                point: null,
                name: _const_.ept,
                focus: false
            },
            end: {
                point: null,
                name: _const_.ept,
                focus: false
            },
            quickSearchPanel: {
                show: false,
                results: null
            },
            resultPanel: {
                show: false,
                results: null
            }
        };

        _this._funsBind(['startEndToggle', 'quickSearchResultItemClick', 'getRoutePlanning', 'buslineClick', 'setMapStart', 'setMapEnd', 'busSublineClick']);
        return _this;
    }

    _createClass(PlanningPanel, [{
        key: 'setMap',
        value: function setMap(map) {
            this.planning.map = map;
        }
    }, {
        key: 'startEndToggle',
        value: function startEndToggle(callback) {
            var _this2 = this;

            this.setState(function (s, p) {
                return {
                    start: s.end,
                    end: s.start
                };
            }, function (e) {
                var s = _this2.state;
                var r = callback && callback.bind(_this2)({ start: s.start, end: s.end });
                if (r !== false) {
                    _this2.fire("startEndToggle", {
                        start: s.start,
                        end: s.end
                    }, false);
                }
            }.bind(this));
        }
    }, {
        key: 'selectPlanningType',
        value: function selectPlanningType(planningType, callback) {
            var _this3 = this;

            var s = this.state;
            var ns = { planningType: planningType };

            switch (planningType) {
                case this.planningType.bus:
                    ns.tripMode = this.tripMode.lessTime;
                    break;
                case this.planningType.drive:
                    ns.tripMode = this.tripMode.lessTime2;
                    break;
                case this.planningType.walk:
                    ns.tripMode = this.tripMode.onlyWalk;
                    break;
            }
            this.setState(this._getUpdateStateFun(ns), function (e) {
                var s = _this3.state;
                var args = {
                    planningType: s.planningType,
                    tripMode: s.tripMode
                };
                var r = callback && callback.bind(_this3)(args);
                if (r !== false) {
                    _this3.fire("planningTypeSelected", args, false);
                }
            });
        }
    }, {
        key: 'setStart',
        value: function setStart(start, callback) {
            var _this4 = this;

            this.setState(this._getUpdateStateFun({ start: start }), function (e) {
                var r = callback && callback.bind(_this4)(_this4.state.start);
                if (r !== false) _this4.fire('startPointSetted', _this4.state.start, false);
            });
        }
    }, {
        key: 'setEnd',
        value: function setEnd(end, callback) {
            var _this5 = this;

            this.setState(this._getUpdateStateFun({ end: end }), function (e) {
                var r = callback && callback.bind(_this5)(_this5.state.end);
                if (r !== false) _this5.fire('endPointSetted', _this5.state.end, false);
            });
        }
    }, {
        key: 'clearStart',
        value: function clearStart(focus) {
            var _this6 = this;

            var start = this.state.start;
            start.name = '';
            start.point = null;
            this.setStart(start, function (e) {
                focus && _this6.focusStart();
                return false;
            });
        }
    }, {
        key: 'clearEnd',
        value: function clearEnd(focus) {
            var _this7 = this;

            var end = this.state.end;
            end.name = '';
            end.point = null;
            this.setEnd(end, function (e) {
                focus && _this7.focusEnd();
                return false;
            });
        }
    }, {
        key: 'focusStart',
        value: function focusStart() {
            this.refs.start.input.refs.input.focus();
            this.currentFocus = "start";
        }
    }, {
        key: 'focusEnd',
        value: function focusEnd() {
            this.refs.end.input.refs.input.focus();
            this.currentFocus = "end";
        }
    }, {
        key: 'toggleQuickSearchPanel',
        value: function toggleQuickSearchPanel(show, callback) {
            var _this8 = this;

            var qsp = this.state.quickSearchPanel;
            qsp.show = show === true || show === false ? show : !qsp.show;

            this.setState(this._getUpdateStateFun({ quickSearchPanel: qsp }), function (e) {
                var show = _this8.state.quickSearchPanel.show;
                var r = callback && callback.bind(_this8)(show);
                if (r !== false) _this8.fire('quickSearchPanelToggled', { show: show }, false);
            }.bind(this));
        }
    }, {
        key: 'addQuickSearchResults',
        value: function addQuickSearchResults(items, callback) {
            var _this9 = this;

            var quickSearchPanel = this.state.quickSearchPanel;
            quickSearchPanel.results = items;

            this.setState(this._getUpdateStateFun({ quickSearchPanel: quickSearchPanel }), function (e) {
                var rt = callback && callback.bind(_this9)({ items: items });
                if (rt !== false) {
                    _this9.fire('quickSearchResultsSetted', { items: items }, false);
                }
            });
        }
    }, {
        key: 'toggleResultPanel',
        value: function toggleResultPanel(show, callback) {
            var _this10 = this;

            var rp = this.state.resultPanel;
            callback = callback && callback.bind(this);
            rp.show = show === true || show === false ? show : !rp.show;

            this.setState(this._getUpdateStateFun({ resultPanel: rp }), function (e) {
                var show = _this10.state.resultPanel.show;
                var r = callback && callback(show);
                if (r !== false) _this10.fire('resultPanelToggled', { show: show }, false);
            }.bind(this));
        }
    }, {
        key: 'clearAll',
        value: function clearAll(callback) {
            var _this11 = this;

            var s = this.state;
            var start = s.start;
            var end = s.end;
            start.name = '';
            start.point = null;
            end.name = '';
            end.point = null;

            s.resultPanel.results = null;
            var resultPanel = s.resultPanel;
            this.clearMapRoutePlanning();

            this.setState(this._getUpdateStateFun({
                start: start,
                end: end,
                resultPanel: resultPanel
            }), function (e) {
                var rt = callback && callback.bind(_this11)(_this11);
                if (rt !== false) _this11.fire('allCleared', { context: _this11 }, false);
            });
        }
    }, {
        key: 'clearResults',
        value: function clearResults(callback) {
            this.clearAll(callback);
        }
    }, {
        key: 'getPOI',
        value: function getPOI(text) {
            antd.message.info('正在搜索...');
            this._getPOI(text, function (rt) {
                /*
                var records = rt.records;
                records = records && records.length && records[0].name ? records : [];
                if (records) {
                    this.refs.quickSearchPanel.scrollTop = 0;
                    this.toggleQuickSearchPanel(true);
                    this.addQuickSearchResults(records);
                }*/
                if (rt.ErrorMessage) {
                    antd.message.error(rt.ErrorMessage);
                } else {
                    var rows = rt.Data.rows;
                    this.refs.quickSearchPanel.scrollTop = 0;
                    this.toggleQuickSearchPanel(true);
                    this.addQuickSearchResults(rows);
                }
            });
        }
    }, {
        key: '_getPOI',
        value: function _getPOI(text, callback) {
            $.post(this.props.fetchUrl, { keyWord: text }, callback.bind(this), 'json');
        }
    }, {
        key: 'quickSearchResultItemClick',
        value: function quickSearchResultItemClick(poi) {
            this.currentFocus == "start" ? this.setStart({ name: poi.SHORTNAME, point: { x: poi.X, y: poi.Y } }) : this.setEnd({ name: poi.SHORTNAME, point: { x: poi.X, y: poi.Y } });
            this.toggleQuickSearchPanel(false);
        }
    }, {
        key: 'selectTripMode',
        value: function selectTripMode(tripMode, callback) {
            var _this12 = this;

            this.setState(this._getUpdateStateFun({ tripMode: tripMode }), function (e) {
                var args = {
                    planningType: _this12.state.planningType,
                    tripMode: tripMode
                };
                var rt = callback && callback.bind(_this12)(args);
                if (rt !== false) _this12.fire('tripModeSelected', args, false);
            });
        }
    }, {
        key: 'getRoutePlanning',
        value: function getRoutePlanning() {
            var s = this.state;
            var start = s.start;
            var end = s.end;
            if (start.point && start.point.x && end.point && end.point.x) {
                var condition = {
                    startName: start.name,
                    endName: end.name,
                    start: start,
                    end: end,
                    planningType: s.planningType,
                    tripMode: s.tripMode
                };
                this._getRoutePlanning(condition);
            }
        }
    }, {
        key: '_getRoutePlanning',
        value: function _getRoutePlanning(condition) {
            antd.message.info('路径规划中...');
            $.post('../Common/GetRoute', condition, function (rt) {
                this.clearMapRoutePlanning();

                var lines = rt.results && rt.results.length && rt.results[0].lines;
                this.setRoutePlanningResult(condition, lines || rt.result);
                this.toggleResultPanel(true);
                if (lines) {
                    this.buslineClick(1, lines[0]);
                } else {
                    this.setMapDriveRoute(rt.result);
                }
            }.bind(this), 'json');
        }
    }, {
        key: 'setRoutePlanningResult',
        value: function setRoutePlanningResult(condition, routeResult, callback) {
            var _this13 = this;

            this.condition = condition;
            var resultPanel = this.state.resultPanel;
            resultPanel.results = routeResult;
            this.setState(this._getUpdateStateFun({ resultPanel: resultPanel }), function (e) {
                var args = { routeResult: routeResult };
                var r = callback && callback.bind(_this13)(args);
                if (r !== false) _this13.fire('routeResultSetted', args, false);
            });
        }
    }, {
        key: 'getBusResults',
        value: function getBusResults(lines) {
            return lines.map(function (item, index) {
                if (index === 0) {
                    item.active = true;
                }
                return React.createElement(BusLine1, { ref: "bus" + (index + 1), index: index + 1, busline: item, buslineClick: this.buslineClick, busSublineClick: this.busSublineClick });
            }.bind(this));
        }
    }, {
        key: 'busSublineClick',
        value: function busSublineClick(item) {
            this.setActiveSubline(item);
            this.fire(this.eventList.busSublineClick, { busSubline: item }, false);
        }
    }, {
        key: 'getRouteResults',
        value: function getRouteResults() {
            var rlt = this.state.resultPanel.results;
            if (rlt) {
                if (this.condition.planningType === this.planningType.bus) {
                    return this.getBusResults(rlt);
                } else {
                    return this.getDriveOrWalkResults(rlt);
                }
            }
            return null;
        }
    }, {
        key: 'routeItemClick',
        value: function routeItemClick(item) {
            this.setMapActiveLine(item);
        }
    }, {
        key: 'getDriveOrWalkResults',
        value: function getDriveOrWalkResults(result) {
            var _this15 = this;

            var cItems = '';
            if (result.simple !== '') {
                if (is.array(result.simple.item)) {
                    cItems = result.simple.item.map(function (item, index) {
                        var _this14 = this;

                        return React.createElement(
                            'div',
                            { onClick: function onClick(e) {
                                    return _this14.routeItemClick(item);
                                }, className: 'rt-item' },
                            React.createElement(
                                'span',
                                null,
                                index + 1
                            ),
                            item.strguide
                        );
                    }.bind(this));
                } else {
                    var item = result.simple.item;
                    cItems = [React.createElement(
                        'div',
                        { onClick: function onClick(e) {
                                return _this15.routeItemClick(item);
                            }, className: 'rt-item' },
                        React.createElement(
                            'span',
                            null,
                            1
                        ),
                        item.strguide
                    )];
                }
            }

            return React.createElement(
                'div',
                { className: 'driveorwalkresult' },
                React.createElement(
                    'div',
                    { className: 'rt-start' },
                    '起点：',
                    this.condition.startName
                ),
                cItems,
                React.createElement(
                    'div',
                    { className: 'rt-end' },
                    '终点：',
                    this.condition.endName
                )
            );
        }
    }, {
        key: 'setMapDriveRoute',
        value: function setMapDriveRoute(result) {
            var orig = result.orig.split(',');
            var dest = result.dest.split(',');

            var routelatlons = result.routelatlon.split(';').map(function (c) {
                var s = c.split(',');
                return [parseFloat(s[1]), parseFloat(s[0])];
            });

            routelatlons.length--;

            var start = L.latLng(parseFloat(orig[1]), parseFloat(orig[0]));
            var end = L.latLng(parseFloat(dest[1]), parseFloat(dest[0]));

            this.setMapStart(start, this.condition.startName);
            this.setMapEnd(end, this.condition.endName);
            this._setMapDriveLine(routelatlons);
        }
    }, {
        key: 'buslineClick',
        value: function buslineClick(index, busline) {
            for (var i in this.refs) {
                if (i.indexOf('bus') > -1) {
                    this.refs[i].setState(function (s, p) {
                        return { active: false, close: true };
                    });
                }
            }
            this.refs['bus' + index].setState(function (s, p) {
                return { active: true, close: false };
            });

            this._setMapBusline(busline);

            this.fire('buslineClick', { busline: busline }, false);
        }
    }, {
        key: 'clearMapStart',
        value: function clearMapStart() {
            this.planning.start && this.planning.start.remove();
            this.planning.start = null;
        }
    }, {
        key: 'setMapStart',
        value: function setMapStart(point, name) {
            this.clearMapStart();
            var pl = this.planning;
            pl.start = L.marker(point, { icon: pl.icons.start, zIndexOffset: 999999 }).bindPopup(name, { className: 'rt-popup-name' }).addTo(pl.map);
        }
    }, {
        key: 'clearMapEnd',
        value: function clearMapEnd() {
            this.planning.end && this.planning.end.remove();
            this.planning.end = null;
        }
    }, {
        key: 'setMapEnd',
        value: function setMapEnd(point, name) {
            this.clearMapEnd();
            var pl = this.planning;
            pl.end = L.marker(point, { icon: pl.icons.end, zIndexOffset: 999999 }).bindPopup(name, { className: 'rt-popup-name' }).addTo(pl.map);
        }
    }, {
        key: 'clearMapActiveLine',
        value: function clearMapActiveLine() {
            this.planning.activeLine && this.planning.activeLine.remove();
            this.planning.activeLine = null;
        }
    }, {
        key: 'clearMapBusLines',
        value: function clearMapBusLines() {
            this.planning.busLines && this.planning.busLines.forEach(function (layer, index) {
                layer.remove();
            });
            this.planning.busLines = null;
        }
    }, {
        key: 'clearStations',
        value: function clearStations() {
            this.planning.stations && this.planning.stations.forEach(function (layer, index) {
                layer.remove();
            });
            this.planning.stations = null;
        }
    }, {
        key: 'clearMapRoutePlanning',
        value: function clearMapRoutePlanning() {
            this.clearMapStart();
            this.clearMapEnd();
            this.clearMapActiveLine();
            this.clearMapBusLines();
            this.clearMapDriveLine();
            this.clearStations();
        }
    }, {
        key: 'setMapActiveLine',
        value: function setMapActiveLine(item) {
            this.clearMapActiveLine();

            var line = item.streetLatLon.split(';').map(function (c) {
                var s = c.split(',');
                return [parseFloat(s[1]), parseFloat(s[0])];
            });

            line.length--;

            var pl = this.planning;
            pl.activeLine = L.polyline(line, pl.lineStyle.activeLine).addTo(pl.map);
        }
    }, {
        key: 'setActiveSubline',
        value: function setActiveSubline(item) {
            this.clearMapActiveLine();
            var line = item.segmentLine[0].linePoint.split(';').map(function (c) {
                var s = c.split(',');
                return [parseFloat(s[1]), parseFloat(s[0])];
            });

            line.length--;

            var pl = this.planning;
            pl.activeLine = L.polyline(line, pl.lineStyle.activeLine).addTo(pl.map);
        }
    }, {
        key: '_setMapBusline',
        value: function _setMapBusline(busline) {
            this.clearMapBusLines();
            this.clearStations();
            this.clearMapActiveLine();

            var start = this.condition.start;
            var end = this.condition.end;

            this.setMapStart([start.point.y, start.point.x], start.name);
            this.setMapEnd([end.point.y, end.point.x], end.name);

            var pl = this.planning;
            var bls = [];
            var sts = [];

            var segments = busline.segments;
            for (var i = 0, l = segments.length; i < l; i++) {
                var seg = segments[i];
                var lineStyle = seg.segmentType == 1 ? pl.lineStyle.lineWalk : pl.lineStyle.lineDefault;

                var linePoint = seg.segmentLine[0].linePoint;

                var linePoints = linePoint.split(';').map(function (c) {
                    var s = c.split(',');
                    return [parseFloat(s[1]), parseFloat(s[0])];
                });

                linePoints.length--;

                var bl = L.polyline(linePoints, lineStyle).addTo(pl.map);
                bls.push(bl);
                if (i !== l - 1) {
                    var lonlat = seg.stationEnd.lonlat;
                    var pnt = lonlat.split(',');
                    pnt = [pnt[1], pnt[0]];
                    var st = L.marker(pnt, { icon: pl.icons.busStation }).bindPopup(seg.stationEnd.name, { className: 'rt-popup-name' }).addTo(pl.map);
                    sts.push(st);
                }
            }

            pl.busLines = bls;
            pl.stations = sts;
        }
    }, {
        key: 'clearMapDriveLine',
        value: function clearMapDriveLine() {
            this.planning.driveLine && this.planning.driveLine.remove();
            this.planning.driveLine = null;
        }
    }, {
        key: '_setMapDriveLine',
        value: function _setMapDriveLine(coordinates) {
            this.clearMapDriveLine();
            var pl = this.planning;
            pl.driveLine = L.polyline([coordinates], pl.lineStyle.lineDefault).addTo(pl.map);
        }
    }, {
        key: 'centerMapPoint',
        value: function centerMapPoint(point) {
            this.planning.map.setView(point);
        }
    }, {
        key: 'centerExtent',
        value: function centerExtent(extent) {
            this.planning.map.fitBounds(extent);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this16 = this;

            var evts = this.eventList;
            this.on([evts.startEndToggle, evts.startPointSetted, evts.endPointSetted, evts.planningTypeSelected, evts.tripModeSelected], this.getRoutePlanning);

            this.on(evts.startPointSetted, function (e) {
                var pnt = [e.data.point.y, e.data.point.x];
                _this16.setMapStart(pnt, e.data.name);
                e.data.center !== false && _this16.centerMapPoint(pnt);
            });

            this.on(evts.endPointSetted, function (e) {
                var pnt = [e.data.point.y, e.data.point.x];
                _this16.setMapEnd(pnt, e.data.name);
                e.data.center !== false && _this16.centerMapPoint(pnt);
            });

            this.on(evts.startEndToggle, function (e) {
                e.data.start.point && _this16.setMapStart([e.data.start.point.y, e.data.start.point.x], e.data.start.name);
                e.data.start.point && _this16.setMapEnd([e.data.end.point.y, e.data.end.point.x], e.data.end.name);
            });

            this.on([evts.routeResultSetted, evts.buslineClick], function (e) {
                var start = _this16.condition.start.point;
                var end = _this16.condition.end.point;

                _this16.centerExtent([[start.y, start.x], [end.y, end.x]]);
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this17 = this;

            var atv = _const_.atv;
            var ept = _const_.ept;

            var s = this.state;
            var start = s.start;
            var end = s.end;

            var cQuickSearchResults = s.quickSearchPanel.results && s.quickSearchPanel.results.map(function (c, i) {
                return React.createElement(QuickSearchResultItem1, { onClick: this.quickSearchResultItemClick, poi: c });
            }.bind(this));

            cQuickSearchResults = cQuickSearchResults && cQuickSearchResults.length ? cQuickSearchResults : React.createElement(
                'div',
                { className: 'quicksearchresultnotfound' },
                '未找到相应结果'
            );

            var cTripMode = null;

            switch (s.planningType) {
                case this.planningType.drive:
                    cTripMode = React.createElement(
                        'ul',
                        null,
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 0), onClick: function onClick(e) {
                                    _this17.selectTripMode(0);
                                } },
                            '推荐路线'
                        ),
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 1), onClick: function onClick(e) {
                                    _this17.selectTripMode(1);
                                } },
                            '路程最短'
                        ),
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 2), onClick: function onClick(e) {
                                    _this17.selectTripMode(2);
                                } },
                            '少走高速'
                        )
                    );
                    break;
                case this.planningType.bus:
                    cTripMode = React.createElement(
                        'ul',
                        null,
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 1), onClick: function onClick(e) {
                                    _this17.selectTripMode(1);
                                } },
                            '推荐路线'
                        ),
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 2), onClick: function onClick(e) {
                                    _this17.selectTripMode(2);
                                } },
                            '少换乘'
                        ),
                        React.createElement(
                            'li',
                            { className: this._getClass(s.tripMode === 4), onClick: function onClick(e) {
                                    _this17.selectTripMode(4);
                                } },
                            '少步行'
                        )
                    );
                    break;
                case this.planningType.walk:
                    React.createElement('ul', null);
                    break;
                default:
                    break;
            }

            var cRouteResult = this.getRouteResults();

            return React.createElement(
                'div',
                { className: 'planningpanel' },
                React.createElement(
                    'ul',
                    { className: 'pp-type' },
                    React.createElement(
                        'li',
                        { onClick: function onClick(e) {
                                return _this17.selectPlanningType(_this17.planningType.drive);
                            }, className: this._getClass(s.planningType == this.planningType.drive) },
                        React.createElement('span', { className: 'iconfont icon-car' }),
                        '驾车'
                    ),
                    React.createElement(
                        'li',
                        { onClick: function onClick(e) {
                                return _this17.selectPlanningType(_this17.planningType.bus);
                            }, className: this._getClass(s.planningType == this.planningType.bus) },
                        React.createElement('span', { className: 'iconfont icon-gongjiao' }),
                        '公交'
                    ),
                    React.createElement(
                        'li',
                        { onClick: function onClick(e) {
                                return _this17.selectPlanningType(_this17.planningType.walk);
                            }, className: this._getClass(s.planningType == this.planningType.walk) },
                        React.createElement('span', { className: 'iconfont icon-iconfontjiaotongiconwalk' }),
                        '步行'
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'pp-inputs' },
                    React.createElement(
                        'div',
                        null,
                        React.createElement(
                            'div',
                            null,
                            React.createElement(antd.Input.Search, { ref: 'start', placeholder: '搜索 起点，或在地图上选择起点...', onBlur: function onBlur(e) {
                                    _this17.state.start.focus = false;_this17.setState({ start: _this17.state.start });
                                }, onFocus: function onFocus(e) {
                                    _this17.state.start.focus = true;_this17.setState(_this17.state);_this17.focusStart();
                                }, onChange: function onChange(e) {
                                    var value = e.target.value;s.start.name = value;s.start.point = null;_this17.setState({ start: s.start });
                                }, onSearch: function onSearch(e) {
                                    return _this17.getPOI(e);
                                }, value: start.name }),
                            React.createElement(antd.Icon, { onClick: function onClick(e) {
                                    _this17.clearStart(true);
                                }, type: "close-circle " + this._getClass(s.start.focus) })
                        ),
                        React.createElement(
                            'div',
                            null,
                            React.createElement(antd.Input.Search, { ref: 'end', placeholder: '搜索 终点，或在地图上选择终点...', onBlur: function onBlur(e) {
                                    _this17.state.end.focus = false;_this17.setState({ end: _this17.state.end });
                                }, onFocus: function onFocus(e) {
                                    _this17.state.end.focus = true;_this17.setState(_this17.state);_this17.focusEnd();
                                }, onChange: function onChange(e) {
                                    var value = e.target.value;s.end.name = value;s.end.point = null;_this17.setState({ end: s.end });
                                }, onSearch: function onSearch(e) {
                                    return _this17.getPOI(e);
                                }, value: end.name }),
                            React.createElement(antd.Icon, { onClick: function onClick(e) {
                                    _this17.clearEnd(true);
                                }, type: "close-circle " + this._getClass(s.end.focus) })
                        )
                    ),
                    React.createElement(
                        antd.Tooltip,
                        { placement: "right", title: "起始点切换" },
                        React.createElement(antd.Icon, { type: 'swap', onClick: function onClick(e) {
                                return _this17.startEndToggle();
                            } })
                    )
                ),
                React.createElement(
                    'div',
                    { ref: 'quickSearchPanel', className: "pp-quicksearchpanel " + this._getClass(s.quickSearchPanel.show) },
                    cQuickSearchResults
                ),
                React.createElement(
                    'div',
                    { className: "pp-resultpanel " + this._getClass(s.resultPanel.show) },
                    React.createElement(
                        'div',
                        { className: 'tripmode' },
                        cTripMode
                    ),
                    React.createElement(
                        'div',
                        { className: 'pp-routeresults' },
                        cRouteResult
                    )
                )
            );
        }
    }]);

    return PlanningPanel;
}(React.Component);

var QuickSearchResultItem1 = function (_React$Component2) {
    _inherits(QuickSearchResultItem1, _React$Component2);

    function QuickSearchResultItem1(props) {
        _classCallCheck(this, QuickSearchResultItem1);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(QuickSearchResultItem1).call(this, props));
    }

    _createClass(QuickSearchResultItem1, [{
        key: 'render',
        value: function render() {
            var _this19 = this;

            var poi = this.props.poi;
            return React.createElement(
                'div',
                { onClick: function onClick(e) {
                        return _this19.props.onClick(poi);
                    }, className: 'quicksearchresultitem' },
                React.createElement(antd.Icon, { type: 'environment' }),
                poi.SHORTNAME,
                React.createElement(
                    'span',
                    null,
                    poi.STYLENAME
                )
            );
        }
    }]);

    return QuickSearchResultItem1;
}(React.Component);

var BusLine1 = function (_React$Component3) {
    _inherits(BusLine1, _React$Component3);

    function BusLine1(props) {
        _classCallCheck(this, BusLine1);

        var _this20 = _possibleConstructorReturn(this, Object.getPrototypeOf(BusLine1).call(this, props));

        _this20.state = {
            close: false,
            active: false
        };
        _this20._funsBind(['click']);
        return _this20;
    }

    _createClass(BusLine1, [{
        key: 'click',
        value: function click() {
            this.props.buslineClick(this.props.index, this.props.busline);
        }
    }, {
        key: 'busSublineClick',
        value: function busSublineClick(item) {
            this.props.busSublineClick(item);
        }
    }, {
        key: 'toggleDetailPanel',
        value: function toggleDetailPanel(close) {
            close = close === undefined ? !this.state.close : !!close;
            if (!close) {
                this.click(this.props.index, this.props.busline);
            }
            this.setState({ close: close });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this22 = this;

            var s = this.state;
            var close = s.close;
            var atv = s.active;
            var props = this.props;

            var busline = props.busline;

            var cBuslineName = busline.lineName.split('|').map(function (name, index) {
                return React.createElement(
                    'span',
                    null,
                    name
                );
            });
            var cBuslineDetails = busline.segments.map(function (item, index) {
                var _this21 = this;

                switch (item.segmentType) {
                    case 1:
                        return React.createElement(
                            'div',
                            { onClick: function onClick(e) {
                                    return _this21.busSublineClick(item);
                                }, className: 'busline-details-item' },
                            React.createElement('span', { className: 'iconfont icon-iconfontjiaotongiconwalk' }),
                            React.createElement(
                                'div',
                                null,
                                '步行至',
                                React.createElement(
                                    'span',
                                    null,
                                    item.stationEnd.name || '目的地'
                                )
                            )
                        );
                        break;
                    default:
                        return React.createElement(
                            'div',
                            { onClick: function onClick(e) {
                                    return _this21.busSublineClick(item);
                                }, className: 'busline-details-item' },
                            React.createElement('span', { className: 'iconfont icon-gongjiao' }),
                            React.createElement(
                                'div',
                                null,
                                '从',
                                React.createElement(
                                    'span',
                                    null,
                                    item.stationStart.name
                                ),
                                '上车乘坐',
                                React.createElement(
                                    'span',
                                    null,
                                    item.segmentLine[0].lineName
                                ),
                                '至',
                                React.createElement(
                                    'span',
                                    null,
                                    item.stationEnd.name
                                ),
                                '下车'
                            )
                        );
                        break;
                }
            }.bind(this));

            return React.createElement(
                'div',
                { className: "busline " + this._getClass(atv) },
                React.createElement(
                    'div',
                    { className: 'busline-name', onClick: this.click },
                    React.createElement(
                        'span',
                        null,
                        '线路 ',
                        props.index
                    ),
                    React.createElement(
                        'div',
                        null,
                        cBuslineName
                    ),
                    React.createElement(
                        antd.Tooltip,
                        { placement: 'right', title: close ? "详情" : "收起" },
                        React.createElement(antd.Icon, { onClick: function onClick(e) {
                                e.stopPropagation();e.nativeEvent.stopImmediatePropagation();_this22.toggleDetailPanel();
                            }, type: close ? "down" : "up" })
                    )
                ),
                React.createElement(
                    'div',
                    { className: "busline-details " + this._getClass(!close) },
                    cBuslineDetails
                )
            );
        }
    }]);

    return BusLine1;
}(React.Component);