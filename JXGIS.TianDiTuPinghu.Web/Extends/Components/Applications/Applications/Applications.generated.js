// @hash v3-B60E4C77E4C06B53EA0F2D96856AFE6E0A555E14
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:54
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Application = function (_React$Component) {
    _inherits(Application, _React$Component);

    function Application() {
        _classCallCheck(this, Application);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Application).call(this));
    }

    _createClass(Application, [{
        key: "onError",
        value: function onError() {
            this.refs.img.src = _bl_ + "/Reference/image/none-picture.png";
        }
    }, {
        key: "render",
        value: function render() {
            var item = this.props.app;
            var title = item.Name;
            var description = item.Description;
            var appUrl = item.Url || '#';
            var imgUrl = item.ImageUrl;

            return React.createElement(
                "div",
                { className: "app-item clearfix" },
                React.createElement("img", { ref: "img", onError: this.onError.bind(this), src: _bl_ + imgUrl }),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "h3",
                        null,
                        React.createElement(
                            "a",
                            { target: "_blank", href: appUrl },
                            title
                        )
                    ),
                    React.createElement(
                        "p",
                        null,
                        description
                    )
                )
            );
        }
    }]);

    return Application;
}(React.Component);

var ApplicationPanel = function (_React$Component2) {
    _inherits(ApplicationPanel, _React$Component2);

    function ApplicationPanel() {
        _classCallCheck(this, ApplicationPanel);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ApplicationPanel).call(this));
    }

    _createClass(ApplicationPanel, [{
        key: "render",
        value: function render() {
            var apps = this.props.apps;
            var cApps = [];
            for (var i = 0, l = apps.length; i < l; i++) {
                cApps.push(React.createElement(Application, { app: apps[i] }));
            }

            return React.createElement(
                "div",
                null,
                cApps
            );
        }
    }]);

    return ApplicationPanel;
}(React.Component);

ReactDOM.render(React.createElement(ApplicationPanel, { apps: config.apps }), document.getElementById("applist"));