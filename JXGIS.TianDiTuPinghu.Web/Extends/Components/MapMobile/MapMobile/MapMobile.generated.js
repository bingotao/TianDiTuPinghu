// @hash v3-B4A72A59A24E8F658055B4970C486E008F22F9FB
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:47:00
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

antd = window['antd-mobile'];

var Map = function () {
    function Map(el) {
        _classCallCheck(this, Map);

        var subdomains = ['0', '1', '2', '3', '4', '5', '6', '7'];
        var baseLayers = {
            vec: {
                anno: L.tileLayer("http://t{s}.tianditu.cn/DataServer?T=cva_w&X={x}&Y={y}&L={z}", { subdomains: subdomains, opacity: 1 }),
                base: L.tileLayer("http://t{s}.tianditu.cn/DataServer?T=vec_w&X={x}&Y={y}&L={z}", { subdomains: subdomains, opacity: 1 })
            },
            img: {
                anno: L.tileLayer("http://t{s}.tianditu.cn/DataServer?T=cia_w&X={x}&Y={y}&L={z}", { subdomains: subdomains, opacity: 1 }),
                base: L.tileLayer("http://t{s}.tianditu.cn/DataServer?T=img_w&X={x}&Y={y}&L={z}", { subdomains: subdomains, opacity: 1 })
            }
        };

        var map = L.map(el, {
            attributionControl: false,
            center: [config.InitPosition.Y, config.InitPosition.X],
            layers: [baseLayers.vec.base, baseLayers.vec.anno, baseLayers.img.base, baseLayers.img.anno],
            zoom: config.InitPosition.Zoom
        });

        map.zoomControl.setPosition('bottomright');
        L.control.scale({ imperial: false }).setPosition('bottomleft').addTo(map);

        map.on('click', function (e) {
            var latlng = e.latlng;
            this.getNeareatPOI(latlng, function (poi) {
                if (poi.IsPOI) {
                    cResultPanel.setState({ results: [poi] });
                    cResultPanel.show(true);
                    cResultPanel.addPOIToMap([poi], false);
                    cResultPanel.setActivePOI(poi.FEATUREGUID);
                }
            }.bind(this));
        }, this);

        this.map = map;
        this.baseLayers = baseLayers;
        this.showBaseMap("vec");

        this.icons = {
            'default': new L.Icon.Default(),
            'poidefault': L.icon({
                iconUrl: _bl_ + '/Reference/image/poi-default.png',
                iconSize: [24, 38],
                iconAnchor: [12, 38],
                popupAnchor: [0, -38]
            }),
            'poiactive': L.icon({
                iconUrl: _bl_ + '/Reference/image/poi-focus.png',
                iconSize: [24, 38],
                iconAnchor: [12, 38],
                popupAnchor: [0, -38]
            }),
            'startpoint': L.icon({
                iconUrl: _bl_ + '/Reference/image/startpoint.png',
                iconSize: [32, 40],
                iconAnchor: [16, 40],
                popupAnchor: [0, -40],
                zIndexOffset: 999
            }),
            'endpoint': L.icon({
                iconUrl: _bl_ + '/Reference/image/endpoint.png',
                iconSize: [32, 40],
                iconAnchor: [16, 40],
                popupAnchor: [0, -40],
                zIndexOffset: 999
            }),
            'sharepoint': L.icon({
                iconUrl: _bl_ + '/Reference/image/sharepoint.png',
                iconSize: [26, 36],
                iconAnchor: [3, 34],
                popupAnchor: [0, -40]
            })
        };

        this.location = null;

        this.route = {
            startPoint: null,
            endPoint: null,
            routes: null
        };

        var drawItems = L.featureGroup();
        this.drawItems = drawItems;
        drawItems.addTo(map);
    }

    _createClass(Map, [{
        key: 'showBaseMap',
        value: function showBaseMap(type) {
            var layers = this.baseLayers;
            layers.img.base.setOpacity(type === 'vec' ? 0 : 1);
            layers.img.anno.setOpacity(type === 'vec' ? 0 : 1);
            if (type === 'vec') {
                $('.leaflet-control-scale').removeClass('active');
            } else {
                $('.leaflet-control-scale').addClass('active');
            }
        }
    }, {
        key: 'fullAndLockScreen',
        value: function fullAndLockScreen() {
            if (!fullScreenApi.isFullScreen()) {
                fullScreenApi.requestFullScreen(document.getElementById('mapmobile'));
                screen.orientation.lock("natural");
            }
        }
    }, {
        key: 'clearLocation',
        value: function clearLocation() {
            this.location ? this.location.remove() : null;
        }
    }, {
        key: 'getLocation',
        value: function getLocation(component, showTip, callback) {
            var cThis = this;
            component && component.showLoading ? component.showLoading() : null;
            if (showTip) {
                antd.Toast.show("定位中...");
            }
            jxgis.geolocation.get(function (rt) {
                x = rt.coords.longitude;
                y = rt.coords.latitude;

                cThis.clearLocation();

                var lnglat = L.latLng([y, x]);
                cThis.map.setView(lnglat);

                var location = L.circleMarker(lnglat, {
                    className: 'position-circle',
                    weight: 10,
                    opacity: 0.2,
                    fillOpacity: 1
                }).addTo(cThis.map);
                cThis.location = location;

                if (showTip) {
                    antd.Toast.success("定位成功");
                }
                component && component.hiddenLoading ? component.hiddenLoading(true) : null;
                if (callback) {
                    callback(lnglat);
                }
            }, function (er) {
                antd.Toast.fail(er.message);
                component && component.hiddenLoading ? component.hiddenLoading() : null;
            });
        }
    }, {
        key: 'getNeareatPOI',
        value: function getNeareatPOI(latlng, callBack) {
            $.post('GetNearestPOI', {
                lat: latlng.lat,
                lng: latlng.lng
            }, function (ro) {
                if (ro.ErrorMessage) {
                    antd.Toast.fail(ro.ErrorMessage);
                } else {
                    var poi = ro.Data;
                    if (callBack) {
                        callBack(poi);
                    }
                    //if (!poi.IsPOI) {
                    //    poi.SHORTNAME += '（附近）';
                    //}
                }
            }.bind(this), 'json');
        }
    }, {
        key: 'setStartPoint',
        value: function setStartPoint(latlng) {
            this.route.startPoint = L.marker(latlng, { icon: this.icons.startpoint }).addTo(this.map);
        }
    }, {
        key: 'setEndPoint',
        value: function setEndPoint(latlng) {
            this.route.endPoint = L.marker(latlng, { icon: this.icons.endpoint }).addTo(this.map);
        }
    }, {
        key: 'setRoute',
        value: function setRoute(routes) {
            var routes = L.polyline(routes, { color: 'red', opacity: 0.6 }).addTo(this.map);
            this.route.routes = routes;
            this.map.fitBounds(routes.getBounds(), { paddingTopLeft: [0, 60] });
        }
    }, {
        key: 'clearPlanning',
        value: function clearPlanning() {
            var route = this.route;
            if (route) {
                route.startPoint && route.startPoint.remove();
                route.endPoint && route.endPoint.remove();
                route.routes && route.routes.remove();
            }
        }
    }, {
        key: 'setPlanning',
        value: function setPlanning(routePlanning, clear) {
            var rp = routePlanning;
            if (rp) {
                if (clear) {
                    this.clearPlanning();
                }
                this.setStartPoint(rp.startPoint);
                this.setEndPoint(rp.endPoint);
                this.setRoute(rp.routes);
            }
        }
    }, {
        key: 'showMarkerShare',
        value: function showMarkerShare(ms) {
            var layer = ms.layer;
            this.drawItems.addLayer(layer);
            var bounds = this.drawItems.getBounds();
            this.map.fitBounds(bounds);

            var el = document.createElement('div');
            ReactDOM.render(React.createElement(MarkerShare, { markerShare: ms }), el);

            var popup = L.popup().setContent(el);
            layer.bindPopup(popup).openPopup();
        }
    }]);

    return Map;
}();

var MarkerShare = function (_React$Component) {
    _inherits(MarkerShare, _React$Component);

    function MarkerShare(props) {
        _classCallCheck(this, MarkerShare);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(MarkerShare).call(this, props));
    }

    _createClass(MarkerShare, [{
        key: 'render',
        value: function render() {
            var ms = this.props.markerShare;
            return React.createElement(
                'div',
                { className: 'markershare' },
                React.createElement(
                    'h4',
                    null,
                    '标题'
                ),
                React.createElement(
                    'div',
                    null,
                    ms.title
                ),
                React.createElement(
                    'h4',
                    null,
                    '内容'
                ),
                React.createElement(
                    'div',
                    null,
                    ms.content
                )
            );
        }
    }]);

    return MarkerShare;
}(React.Component);

var Tools = function (_React$Component2) {
    _inherits(Tools, _React$Component2);

    function Tools() {
        _classCallCheck(this, Tools);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Tools).call(this));
    }

    _createClass(Tools, [{
        key: 'render',
        value: function render() {
            var map = this.props.map;
            return React.createElement(
                'div',
                null,
                React.createElement(BtnLocation, { ref: 'btnLocation', map: map }),
                React.createElement(BtnFullScreen, { ref: 'btnFullScreen', map: map }),
                React.createElement(BtnLayerToggle, { ref: 'btnLayerToggle', map: map })
            );
        }
    }]);

    return Tools;
}(React.Component);

var Toolbar = function (_React$Component3) {
    _inherits(Toolbar, _React$Component3);

    function Toolbar(props) {
        _classCallCheck(this, Toolbar);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this, props));

        _this3.state = {
            showTools: false
        };
        return _this3;
    }

    _createClass(Toolbar, [{
        key: 'toggleShowTools',
        value: function toggleShowTools() {
            this.setState({ showTools: !this.state.showTools });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var s = this.state;
            return React.createElement(
                'div',
                null,
                React.createElement(
                    'span',
                    { onClick: function onClick(e) {
                            _this4.props.onAreaSearchClick();
                        } },
                    React.createElement('span', { className: 'iconfont icon-zhoubian' }),
                    '附近'
                ),
                React.createElement(
                    'span',
                    { onClick: function onClick(e) {
                            _this4.props.onRouteClick();
                        } },
                    React.createElement('span', { className: 'iconfont icon-604luxian' }),
                    '路线'
                ),
                React.createElement(
                    'span',
                    { onClick: function onClick(e) {
                            _this4.toggleShowTools();
                        } },
                    React.createElement('span', { className: 'iconfont icon-shezhi' }),
                    '工具'
                ),
                React.createElement(
                    'ul',
                    { style: { display: s.showTools ? "block" : "none" } },
                    React.createElement(
                        'li',
                        null,
                        React.createElement(
                            'a',
                            { href: '@ViewBag.BaseUrl/Home/Index' },
                            React.createElement('span', { className: 'iconfont icon-diannao' }),
                            '首页'
                        )
                    ),
                    React.createElement(
                        'li',
                        { onClick: function onClick(e) {
                                _this4.toggleShowTools();
                                var map = _this4.props.map;
                                map.cResultsPanel.hidden(false, true);
                                map.cRoute.hidden();
                                map.cRoute.clear(true);
                                map.drawItems.clearLayers();
                            } },
                        React.createElement('span', { className: 'iconfont icon-qingchu' }),
                        '清空'
                    )
                )
            );
        }
    }]);

    return Toolbar;
}(React.Component);

$(function () {
    map = new Map(document.getElementById("map"));

    cOTools = ReactDOM.render(React.createElement(Tools, { map: map }), document.getElementById("otools"));

    cRoute = ReactDOM.render(React.createElement(RoutePlanning, { map: map }), document.getElementById('routeplanning'));

    cResultPanel = ReactDOM.render(React.createElement(ResultPanel, { onGoToHereClick: function onGoToHereClick(e) {
            cRoute.setEndPoint(e);
            cRoute.show();
        }, map: map }), document.getElementById("resultpanel"));
    cSearch = ReactDOM.render(React.createElement(Search, { map: map, resultPanel: cResultPanel }), document.getElementById("search"));
    cAreaSearch = ReactDOM.render(React.createElement(AreaSearch, { map: map, resultPanel: cResultPanel, categories: config.SearchCategory }), document.getElementById("areasearch"));

    cToolBar = ReactDOM.render(React.createElement(Toolbar, { map: map,
        onAreaSearchClick: function onAreaSearchClick(e) {
            if (map.location) {
                var pnt = map.location.getLatLng();
                cAreaSearch.show("当前位置", { lng: pnt.lng, lat: pnt.lat });
                cResultPanel.target = 'areaSearch';
            } else {
                map.getLocation(null, true, function (latlng) {
                    var pnt = map.location.getLatLng();
                    cAreaSearch.show("当前位置", { lng: pnt.lng, lat: pnt.lat });
                    cResultPanel.target = 'areaSearch';
                }.bind(map));
            }
        },
        onRouteClick: function onRouteClick(e) {
            cRoute.show(false);
        } }), document.getElementById("toolbar"));

    $('.mm-title').on('click', function (e) {
        cSearch.show(true);
        cResultPanel.hidden(false);
    });

    map.cToolbar = cToolBar;
    map.cAreaSearch = cAreaSearch;
    map.cSearch = cSearch;
    map.cResultsPanel = cResultPanel;
    map.cRoute = cRoute;
    map.cOTools = cOTools;
    //cOTools.refs.btnLocation.getLocation();
    //$('body').one('click', function () {
    //    if (!fullScreenApi.isFullScreen()) map.fullAndLockScreen();
    //});

    //获取url参数
    var urlArgs = commonTool.urlArgs;
    if (urlArgs.markershare) {
        $.post('GetMarkerShare?id=' + urlArgs.markershare, function (rt) {
            if (rt.ErrorMessage) {
                antd.Toast.fail(rt.ErrorMessage);
            } else {
                var ms = rt.Data.MarkerShare;
                var layer = L.GeoJSON.geometryToLayer(JSON.parse(ms.GeoJSON));
                layer.setIcon ? layer.setIcon(map.icons.sharepoint) : null;
                var markerShare = {
                    id: ms.ID,
                    title: ms.Title,
                    content: ms.Content,
                    layer: layer
                };
                map.showMarkerShare(markerShare);
            }
        }, 'json');
    } else if (urlArgs.poishare) {
        $.post('GetPOI?id=' + urlArgs.poishare, function (rt) {
            if (rt.ErrorMessage) {
                antd.Toast.fail(rt.ErrorMessage);
            } else {
                var poi = rt.Data.POI;
                map.map.setView([poi.Y, poi.X]);
                cResultPanel.setState({ results: [poi] });
                cResultPanel.show(true);
                cResultPanel.addPOIToMap([poi], false);
                cResultPanel.setActivePOI(poi.FEATUREGUID);
            }
        }, 'json');
    }
});