// @hash v3-C5462FE2A4E3EC49276B87111B9CDCCDE07D4C3C
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:47:00
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BtnFullScreen = function (_React$Component) {
    _inherits(BtnFullScreen, _React$Component);

    function BtnFullScreen() {
        _classCallCheck(this, BtnFullScreen);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(BtnFullScreen).call(this));
    }

    _createClass(BtnFullScreen, [{
        key: "click",
        value: function click() {
            this.props.map.fullAndLockScreen();
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement("span", { onClick: this.click.bind(this), className: "btn-mobile btn-fullscreen iconfont icon-quanping" });
        }
    }]);

    return BtnFullScreen;
}(React.Component);