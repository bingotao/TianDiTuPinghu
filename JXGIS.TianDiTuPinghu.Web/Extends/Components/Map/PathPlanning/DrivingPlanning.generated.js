// @hash v3-D0FE17A06BB3561B88F8BF90716859C56D4A6C61
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:58
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DrivingPanning = function (_React$Component) {
    _inherits(DrivingPanning, _React$Component);

    function DrivingPanning(props) {
        _classCallCheck(this, DrivingPanning);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DrivingPanning).call(this, props));

        _this.state = {
            extend: true
        };
        return _this;
    }

    _createClass(DrivingPanning, [{
        key: "drawRoute",
        value: function drawRoute(dp) {
            var startPoint = dp.StartPoint;
            var endPoint = dp.EndPoint;
            var path = dp.RoutePath;

            var p = this.props.parent;
            p.clearMap();

            var startLayer = L.marker(startPoint, { icon: p.map.icons.startpoint });
            var endLayer = L.marker(endPoint, { icon: p.map.icons.endpoint });
            p.routePath.addLayer(startLayer);
            p.routePath.addLayer(endLayer);
            p.startLayer = startLayer;
            p.endLayer = endLayer;

            var pathLayer = L.polyline(path, { color: 'red', weight: 5, opacity: 0.8 });
            p.routePath.addLayer(pathLayer);

            p.drivingLayer = pathLayer;
        }
    }, {
        key: "togglePanel",
        value: function togglePanel() {
            this.setState({
                extend: !this.state.extend
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var dp = this.props.plannings;
            var routes = [];

            if (dp && dp.Routes) {
                var rts = dp.Routes;
                for (var i = 0, l = rts.length; i < l; i++) {
                    routes.push(React.createElement(
                        "div",
                        { className: "driving-panning-item clearfix" },
                        React.createElement(
                            "i",
                            { className: "anticon" },
                            i + 1,
                            "."
                        ),
                        React.createElement(
                            "span",
                            null,
                            rts[i]
                        )
                    ));
                }
            } else {
                dp = {};
            }
            return React.createElement(
                "div",
                { style: { display: dp.Routes ? 'block' : 'none' }, className: "driving-panning" },
                React.createElement(
                    "div",
                    { className: "driving-panning-item driving-panning-start clearfix", onClick: function onClick(e) {
                            return _this2.togglePanel();
                        } },
                    React.createElement(
                        "span",
                        null,
                        React.createElement(antd.Icon, { type: this.state.extend ? "minus" : "plus" })
                    ),
                    React.createElement(antd.Icon, { type: "environment" }),
                    React.createElement(
                        "span",
                        { className: "enhance" },
                        "起点（",
                        React.createElement(
                            "span",
                            null,
                            dp.Distance,
                            "，",
                            dp.Time,
                            "）"
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "driving-panning-details " + (this.state.extend ? "active" : "") },
                    routes
                ),
                React.createElement(
                    "div",
                    { className: "driving-panning-item driving-panning-end clearfix" },
                    React.createElement(antd.Icon, { type: "environment" }),
                    React.createElement(
                        "span",
                        { className: "enhance" },
                        "终点"
                    )
                )
            );
        }
    }]);

    return DrivingPanning;
}(React.Component);