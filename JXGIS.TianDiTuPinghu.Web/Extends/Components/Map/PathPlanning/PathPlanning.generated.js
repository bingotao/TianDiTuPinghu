// @hash v3-9114ED8CC10F84D3717422C6B587694A2BD193CC
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:59
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
   type类型：driving、bus
*/

var PathPlanningPanel = function (_React$Component) {
    _inherits(PathPlanningPanel, _React$Component);

    function PathPlanningPanel(props) {
        _classCallCheck(this, PathPlanningPanel);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PathPlanningPanel).call(this, props));

        _this.map = props.map;
        var routePath = L.featureGroup().addTo(_this.map.map);
        _this.map.routePath = routePath;
        _this.routePath = routePath;

        _this.startLayer = null;
        _this.endLayer = null;
        _this.drivingLayer = null;

        var defaultState = {
            loading: false,
            type: 'driving',
            start: {
                point: null,
                name: ''
            },
            end: {
                point: null,
                name: ''
            },
            drivingPath: null,
            showSearchResults: false
        };
        _this.defaultState = defaultState;
        _this.state = defaultState;
        return _this;
    }

    _createClass(PathPlanningPanel, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (!L.Browser.webkit) {
                var $scroll = this.$scroll;
                if ($scroll) {
                    $scroll.mCustomScrollbar("scrollTo", "top");
                } else {
                    this.$scroll = $('.pathplanning-panel .pathpanning-result').mCustomScrollbar({
                        theme: "dark-blue",
                        scrollInertia: 0
                    });
                }
            }
        }
    }, {
        key: 'getPostions',
        value: function getPostions(e, type) {
            var text = e.target.value;
            var obj = {};
            obj[type] = { name: text, point: this.state[type].point };
            this.setState(obj);

            if (text) {
                this.getPOI(text);
            }
        }
    }, {
        key: 'getPOI',
        value: function getPOI(keyWord) {
            $.post('QuickSearch', { keyWord: keyWord }, function (cThis) {
                return function (rt) {
                    if (rt.ErrorMessage) {
                        _g.fun.showError(rt.ErrorMessage);
                    } else {
                        var rows = rt.Data.rows;
                        if (rows.length) {
                            cThis.showSearchResults();
                            cThis.refs.searchResults.setState({ results: rows });
                        }
                    }
                };
            }(this), 'json');
        }
    }, {
        key: 'getPlanning',
        value: function getPlanning(startPoint, endPoint, type) {
            var start = startPoint || this.state.start.point;
            var end = endPoint || this.state.end.point;
            var type = type || this.state.type;

            if (start && end && type) {
                this.setState({ loading: true });
                $.post('GetRoutePlanning', {
                    Begin: {
                        lng: start.lng,
                        lat: start.lat
                    },
                    End: {
                        lng: end.lng,
                        lat: end.lat
                    },
                    PlanningType: 1,
                    TripMode: type === 'bus' ? 1 : 2
                }, function (cThis, type) {
                    return function (rt) {
                        cThis.setState({ loading: false });
                        if (rt.ErrorMessage) {
                            _g.fun.showError(rt.ErrorMessage);
                        } else {
                            var route = rt.Data.route;
                            var obj = {};
                            obj[type + 'Path'] = route;

                            cThis.refs.driving.drawRoute(route);
                            cThis.setState(obj);
                        }
                    };
                }(this, type), 'json');
            } else {
                _g.fun.showError('请设置起点和终点！');
            }
        }
    }, {
        key: 'setStart',
        value: function setStart(start, getRoute) {
            if (this.startLayer) this.startLayer.remove();
            if (start) {
                this.startLayer = L.marker(start.point, { icon: this.map.icons.startpoint });
                this.routePath.addLayer(this.startLayer);
            }
            var obj = {
                drivingPath: null,
                start: start || { point: null, name: '' }
            };

            if (this.drivingLayer) this.drivingLayer.remove();

            var end = this.state.end;
            if (getRoute && start && start.point && end && end.point) {
                this.getPlanning(start.point, end.point, this.state.type);
            }
            this.setState(obj);
        }
    }, {
        key: 'setEnd',
        value: function setEnd(end, getRoute) {
            if (this.endLayer) this.endLayer.remove();
            if (end) {
                this.endLayer = L.marker(end.point, { icon: this.map.icons.endpoint });
                this.routePath.addLayer(this.endLayer);
            }
            var obj = {
                drivingPath: null,
                end: end || { point: null, name: '' }
            };

            if (this.drivingLayer) this.drivingLayer.remove();
            var start = this.state.start;
            if (getRoute && start && start.point && end && end.point) {
                this.getPlanning(start.point, end.point, this.state.type);
            }
            this.setState(obj);
        }
    }, {
        key: 'setType',
        value: function setType(type) {
            this.setState({ type: type === 'bus' ? 'bus' : 'driving' });
        }
    }, {
        key: 'toggleStartEnd',
        value: function toggleStartEnd() {
            var start = this.state.start;
            var end = this.state.end;
            if (this.startLayer) this.startLayer.remove();
            this.startLayer = L.marker(start.point, { icon: this.map.icons.startpoint });
            this.routePath.addLayer(this.startLayer);
            if (this.endLayer) this.endLayer.remove();
            this.endLayer = L.marker(end.point, { icon: this.map.icons.endpoint });
            this.routePath.addLayer(this.endLayer);

            if (start.point && end.point) {
                this.getPlanning(end.point, start.point, this.state.type);
            }

            this.setState({
                start: end,
                end: start
            });
        }
    }, {
        key: 'setPosition',
        value: function setPosition(position, pointType) {
            var type = pointType || this.focus;
            var obj = { showSearchResults: false };
            var map = this.map.map;
            if (this[type + 'Layer']) this[type + 'Layer'].remove();
            var point = L.latLng(position.Y, position.X);
            var layer = L.marker(point, { icon: type === 'start' ? this.map.icons.startpoint : this.map.icons.endpoint });
            this.routePath.addLayer(layer);
            this[type + 'Layer'] = layer;

            obj[type] = {
                name: position.SHORTNAME,
                point: point
            };

            var p1 = type === 'start' ? point : this.state.start.point;
            var p2 = type === 'start' ? this.state.end.point : point;
            if (p1 && p2) {
                map.fitBounds(L.latLngBounds(p1, p2), { paddingTopLeft: [400, 50], paddingBottomRight: [50, 50] });
                this.getPlanning(p1, p2, this.state.type);
            } else {
                map.setView(point);
            }

            this.setState(obj);
        }
    }, {
        key: 'showSearchResults',
        value: function showSearchResults() {
            this.setState({
                showSearchResults: true
            });
        }
    }, {
        key: 'hiddenSearchResults',
        value: function hiddenSearchResults() {
            this.setState({
                showSearchResults: false
            });
        }
    }, {
        key: 'clearMap',
        value: function clearMap() {
            this.startLayer = null;
            this.endLayer = null;
            this.drivingLayer = null;
            this.routePath.clearLayers();
        }
    }, {
        key: 'clearResults',
        value: function clearResults() {
            this.setState(this.defaultState);
            this.clearMap();
        }
    }, {
        key: 'clearAll',
        value: function clearAll() {
            this.setState(this.defaultState);
            this.clearMap();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var start = this.state.start;
            var end = this.state.end;
            var type = this.state.type;

            return React.createElement(
                'div',
                { className: 'pathplanning-panel' },
                React.createElement(
                    'div',
                    { className: 'pathplanning-nav' },
                    React.createElement(
                        antd.Row,
                        null,
                        React.createElement(
                            antd.Col,
                            { onClick: function onClick(e) {
                                    return _this2.setType('driving');
                                }, className: this.state.type === 'driving' ? 'active' : '', span: 12 },
                            React.createElement('span', { className: 'iconfont icon-qiche' }),
                            '驾车'
                        ),
                        React.createElement(
                            antd.Col,
                            { onClick: function onClick(e) {
                                    return _this2.setType('bus');
                                }, className: this.state.type === 'bus' ? 'active' : '', span: 12 },
                            React.createElement('span', { className: 'iconfont icon-gongjiao' }),
                            '公交'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'pathplanning-header' },
                    React.createElement('span', { className: 'iconfont icon-qiche' }),
                    '驾车'
                ),
                React.createElement(
                    antd.Row,
                    null,
                    React.createElement(
                        antd.Col,
                        { span: 3 },
                        React.createElement(antd.Icon, { type: 'swap', onClick: this.toggleStartEnd.bind(this) })
                    ),
                    React.createElement(
                        antd.Col,
                        { span: 21 },
                        React.createElement(
                            'div',
                            null,
                            React.createElement('span', { className: 'pathplanning-start-icon' }),
                            React.createElement('input', { ref: 'start', type: 'text', onFocus: function onFocus(e) {
                                    return _this2.focus = 'start';
                                }, onChange: function onChange(e) {
                                    return _this2.getPostions(e, 'start');
                                }, placeholder: '输入起点或在图上选点', value: start ? start.name : '' }),
                            React.createElement(antd.Icon, { onClick: function onClick(e) {
                                    _this2.setStart(null);_this2.refs.start.focus();
                                }, type: 'close-circle' })
                        ),
                        React.createElement(
                            'div',
                            null,
                            React.createElement('span', { className: 'pathplanning-end-icon' }),
                            React.createElement('input', { onFocus: function onFocus(e) {
                                    return _this2.focus = 'end';
                                }, ref: 'end', onChange: function onChange(e) {
                                    return _this2.getPostions(e, 'end');
                                }, type: 'text', placeholder: '输入终点或在图上选点', value: end ? end.name : '' }),
                            React.createElement(antd.Icon, { onClick: function onClick(e) {
                                    _this2.setEnd(null);_this2.refs.end.focus();
                                }, type: 'close-circle' })
                        )
                    ),
                    React.createElement(
                        antd.Col,
                        { span: 24 },
                        React.createElement(
                            antd.Button,
                            { loading: this.state.loading, onClick: function onClick(e) {
                                    return _this2.getPlanning();
                                }, type: 'primary' },
                            '出发'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { style: { display: this.state.showSearchResults ? 'block' : 'none' } },
                    React.createElement(QuickSearchResults, { ref: 'searchResults', itemClick: this.setPosition.bind(this) })
                ),
                React.createElement(
                    'div',
                    { className: 'pathpanning-result' },
                    React.createElement(
                        'div',
                        { style: { display: type === 'bus' ? 'block' : 'none' } },
                        React.createElement(BusPanningResultPanel, { ref: 'bus', parent: this, plannings: this.state.busPath })
                    ),
                    React.createElement(
                        'div',
                        { style: { display: type === 'driving' ? 'block' : 'none' } },
                        React.createElement(DrivingPanning, { ref: 'driving', parent: this, plannings: this.state.drivingPath })
                    )
                )
            );
        }
    }]);

    return PathPlanningPanel;
}(React.Component);