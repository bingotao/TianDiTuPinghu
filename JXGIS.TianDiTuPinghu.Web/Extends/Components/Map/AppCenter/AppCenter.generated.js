// @hash v3-0787DD0A04CF1941F0ACF1E0F1F4313EBE605565
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:56
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AppCenter = function (_React$Component) {
    _inherits(AppCenter, _React$Component);

    function AppCenter() {
        _classCallCheck(this, AppCenter);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AppCenter).call(this));

        var tabs = {
            "0": "0",
            "1": "1",
            "2": "2"
        };
        _this.tabs = tabs;
        _this.state = {
            currentTab: tabs["0"],
            hidden: true
        };
        return _this;
    }

    _createClass(AppCenter, [{
        key: "show",
        value: function show(tab) {
            var state = {
                hidden: false
            };
            if (tab) state.currentTab = tab;
            this.setState(state);
        }
    }, {
        key: "hidden",
        value: function hidden() {
            this.setState({
                hidden: true
            });
        }
    }, {
        key: "toggleHidden",
        value: function toggleHidden() {
            this.setState({
                hidden: !this.state.hidden
            });
        }
    }, {
        key: "selectTab",
        value: function selectTab(tabName) {
            this.setState({
                currentTab: tabName
            });
        }
    }, {
        key: "getActiveClass",
        value: function getActiveClass(tabName) {
            return tabName == this.state.currentTab ? "active" : "";
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var lxghCls = this.getActiveClass(this.tabs["0"]);
            var zhfwCls = this.getActiveClass(this.tabs["1"]);
            var zttcCls = this.getActiveClass(this.tabs["2"]);

            return React.createElement(
                "div",
                { className: "appcenter " + (this.state.hidden ? "" : "active") },
                React.createElement(
                    "div",
                    { className: "appcenter-nav" },
                    React.createElement(
                        "span",
                        { onClick: function onClick(e) {
                                return _this2.selectTab(_this2.tabs["0"]);
                            }, className: lxghCls },
                        React.createElement("span", { className: "iconfont icon-604luxian" }),
                        "线路规划"
                    ),
                    React.createElement(
                        "span",
                        { onClick: function onClick(e) {
                                return _this2.selectTab(_this2.tabs["1"]);
                            }, className: zhfwCls },
                        React.createElement("span", { className: "iconfont icon-zonghechaxun" }),
                        "地图标注"
                    ),
                    React.createElement(
                        "span",
                        { onClick: function onClick(e) {
                                return _this2.selectTab(_this2.tabs["2"]);
                            }, className: zttcCls },
                        React.createElement("span", { className: "iconfont icon-tuceng" }),
                        "综合服务"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "appcenter-appcontainer" },
                    React.createElement(
                        "div",
                        { className: lxghCls },
                        React.createElement(PlanningPanel, { ref: "routePlanning", fetchUrl: "../Map/QuickSearch", map: this.props.map })
                    ),
                    React.createElement(
                        "div",
                        { className: zhfwCls },
                        React.createElement(MarkerLabelPanel, { ref: "markerPanel", map: this.props.map })
                    ),
                    React.createElement(
                        "div",
                        { className: zttcCls },
                        React.createElement(LayerControl, { layers: this.props.layers })
                    )
                ),
                React.createElement(
                    "div",
                    { onClick: function onClick(e) {
                            return _this2.hidden();
                        }, className: "appcenter-panel-sliderup" },
                    React.createElement(antd.Icon, { type: "caret-up" })
                )
            );
        }
    }]);

    return AppCenter;
}(React.Component);