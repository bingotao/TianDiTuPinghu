// @hash v3-276BA9D3F36913641E82F40713A3C417D738F4A3
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:58
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
    labelItem 的结构
    {
        id:"id",
        content:"内容",
        createTime:"2016年12月2日",
        x:'',
        y:''
    }
*/

var MarkerLabelItem = function (_React$Component) {
    _inherits(MarkerLabelItem, _React$Component);

    function MarkerLabelItem(props) {
        _classCallCheck(this, MarkerLabelItem);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(MarkerLabelItem).call(this, props));
    }

    _createClass(MarkerLabelItem, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var i = this.props.labelItem;
            return React.createElement(
                'div',
                { className: "labelitem " + (i.layer ? 'active' : '') },
                React.createElement(antd.Icon, { onClick: function onClick(e) {
                        return _this2.props.panel.toggleMapItem(i);
                    }, type: 'pushpin' }),
                React.createElement(antd.Icon, { onClick: function onClick(e) {
                        return _this2.props.panel.removeItem(i);
                    }, type: 'delete' }),
                React.createElement(antd.Icon, { type: i.layer ? "eye" : "eye-o" }),
                React.createElement(
                    'p',
                    { onClick: function onClick(e) {
                            return _this2.props.panel.toggleMapItem(i);
                        }, className: 'labelitem-content ' },
                    i.content
                ),
                React.createElement(
                    'p',
                    { onClick: function onClick(e) {
                            return _this2.props.panel.toggleMapItem(i);
                        }, className: 'labelitem-time ' },
                    '创建于：',
                    i.createTime
                )
            );
        }
    }]);

    return MarkerLabelItem;
}(React.Component);

var MarkerLabelPanel = function (_React$Component2) {
    _inherits(MarkerLabelPanel, _React$Component2);

    function MarkerLabelPanel(props) {
        _classCallCheck(this, MarkerLabelPanel);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(MarkerLabelPanel).call(this, props));

        var map = props.map;
        _this3.map = map;
        _this3.storeName = "mapMarkerLabels";
        var labelItems = store.get(_this3.storeName);

        labelItems = labelItems || [];

        _this3.state = {
            labelItems: labelItems
        };

        var markerFtGroupLayer = L.featureGroup().addTo(map.map);
        _this3.markerFtGroupLayer = markerFtGroupLayer;
        return _this3;
    }

    _createClass(MarkerLabelPanel, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (!L.Browser.webkit) {
                var $scroll = this.$scroll;
                if ($scroll) {
                    $scroll.mCustomScrollbar("scrollTo", "top");
                } else {
                    this.$scroll = $('.appcenter .labelitems').mCustomScrollbar({
                        theme: "dark-blue",
                        scrollInertia: 0
                    });
                }
            }
        }
    }, {
        key: 'createMarkerOnMap',
        value: function createMarkerOnMap(layer) {
            layer.addTo(this.map.map);
            var content = MarkerLabelMapPopup.create(layer, this);
            var popoup = L.popup({ className: 'markerlabel-popoup' }).setContent(content.dom);
            layer.bindPopup(popoup).openPopup();
        }
    }, {
        key: 'btnAddClick',
        value: function btnAddClick() {
            this.map.drawControl.setDrawingOptions({
                marker: {
                    icon: this.map.icons.markerlabel
                }
            });
            this.map.activateDrawPoint('marker');
        }
    }, {
        key: 'showAll',
        value: function showAll() {
            var labelItems = this.state.labelItems;
            for (var i = 0, l = labelItems.length; i < l; i++) {
                this.showMapItem(labelItems[i], false);
            }
        }
    }, {
        key: 'hiddenAll',
        value: function hiddenAll() {
            var labelItems = this.state.labelItems;
            for (var i = 0, l = labelItems.length; i < l; i++) {
                this.hiddenMapItem(labelItems[i]);
            }
        }
    }, {
        key: 'addItem',
        value: function addItem(item) {
            //取消popoup绑定
            item.layer.closePopup();
            item.layer.unbindPopup();
            /*
            todo 绑定 tooltip
            */
            var content = MarkerLabelMapTooltip.create(item, this);
            item.layer.bindTooltip(content.dom, { permanent: true, direction: 'right' });

            this.state.labelItems.push(item);
            this.setState({
                labelItems: this.state.labelItems
            });

            this.saveMarkerLabelItems();
        }
    }, {
        key: 'saveMarkerLabelItems',
        value: function saveMarkerLabelItems() {
            var items = this.state.labelItems;
            var newItems = items.map(function (i) {
                return { id: i.id, content: i.content, createTime: i.createTime, x: i.x, y: i.y };
            });
            store.set(this.storeName, newItems);
        }
    }, {
        key: 'toggleMapItem',
        value: function toggleMapItem(item) {
            item.layer ? this.hiddenMapItem(item) : this.showMapItem(item, true);
        }
    }, {
        key: 'showMapItem',
        value: function showMapItem(item, bCenter) {
            var layer = L.GeoJSON.geometryToLayer({
                type: "Feature",
                properties: {},
                geometry: {
                    type: "Point",
                    coordinates: [item.x, item.y]
                }
            });
            layer.setIcon(this.map.icons.markerlabel);
            if (bCenter) this.map.map.setView(layer.getLatLng());

            item.layer = layer.addTo(this.map.map);
            var content = MarkerLabelMapTooltip.create(item, this);
            item.layer.bindTooltip(content.dom, { permanent: true, direction: 'right' });
            this.setState({ labelItems: this.state.labelItems });
        }
    }, {
        key: 'hiddenMapItem',
        value: function hiddenMapItem(item) {
            item.layer && item.layer.remove();
            item.layer = null;
            this.setState({ labelItems: this.state.labelItems });
        }
    }, {
        key: 'removeItem',
        value: function removeItem(item) {
            var labelItems = this.state.labelItems;
            var newItems = [];

            for (var j = 0, l = labelItems.length; j < l; j++) {
                var i = labelItems[j];
                if (i.id == item.id) {
                    if (item.layer) item.layer.remove();
                    continue;
                }
                newItems.push(i);
            }
            this.setState({ labelItems: newItems });
            this.saveMarkerLabelItems();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var cLabelItems = [];

            for (var i = this.state.labelItems.length - 1; i >= 0; i--) {
                cLabelItems.push(React.createElement(MarkerLabelItem, { panel: this, labelItem: this.state.labelItems[i] }));
            }

            return React.createElement(
                'div',
                { className: 'markerlabelpanel clearfix' },
                React.createElement(
                    'div',
                    { className: 'clearfix' },
                    React.createElement(
                        antd.Button,
                        { type: 'primary', onClick: function onClick(e) {
                                return _this4.btnAddClick();
                            } },
                        '添加标注'
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'labelitems' },
                    React.createElement(
                        'div',
                        null,
                        cLabelItems
                    )
                )
            );
        }
    }]);

    return MarkerLabelPanel;
}(React.Component);

var MarkerLabelMapPopup = function (_React$Component3) {
    _inherits(MarkerLabelMapPopup, _React$Component3);

    function MarkerLabelMapPopup(props) {
        _classCallCheck(this, MarkerLabelMapPopup);

        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(MarkerLabelMapPopup).call(this, props));

        _this5.layer = props.layer;
        _this5.state = {
            content: null
        };
        return _this5;
    }

    _createClass(MarkerLabelMapPopup, [{
        key: 'okClick',
        value: function okClick() {
            var content = this.state.content;
            content = content ? content.trim() : '';
            if (!content) {
                _g.fun.showError("尚未填写任何标注信息！");
            } else if (content.length > 20) {
                _g.fun.showError("标注信息请少于20字！");
            } else {
                var now = Date.now();
                var date = new Date(now);
                var hours = date.getHours();
                hours = (hours < 10 ? "0" : "") + hours;
                var minutes = date.getMinutes();
                minutes = (minutes < 10 ? "0" : "") + minutes;
                var timeString = date.getFullYear() + "年" + (date.getMonth() + 1) + "月" + date.getDate() + "日 " + hours + ":" + minutes;
                var latlng = this.layer.getLatLng();
                var item = {
                    id: now,
                    content: this.state.content,
                    createTime: timeString,
                    x: latlng.lng,
                    y: latlng.lat
                };
                item.layer = this.layer;
                this.props.panel.addItem(item);
            }
        }
    }, {
        key: 'cancelClick',
        value: function cancelClick() {
            this.layer.remove();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this6 = this;

            return React.createElement(
                'div',
                { className: 'markerlabel-mappopup' },
                React.createElement(
                    'h4',
                    null,
                    '标注'
                ),
                React.createElement('input', { ref: 'input', className: 'ct-input', placeholder: '请填写标注内容', onChange: function onChange(e) {
                        return _this6.setState({ content: e.target.value });
                    }, value: this.state.content }),
                React.createElement(
                    'div',
                    { className: 'clearfix' },
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                return _this6.cancelClick();
                            } },
                        '取消'
                    ),
                    React.createElement(
                        antd.Button,
                        { type: 'primary', onClick: function onClick(e) {
                                return _this6.okClick();
                            } },
                        '确定'
                    )
                )
            );
        }
    }]);

    return MarkerLabelMapPopup;
}(React.Component);

MarkerLabelMapPopup.create = function (layer, markerLabelPanel) {
    var dom = document.createElement('div');
    var content = ReactDOM.render(React.createElement(MarkerLabelMapPopup, { panel: markerLabelPanel, layer: layer }), dom);
    content.dom = dom;
    return content;
};

var MarkerLabelMapTooltip = function (_React$Component4) {
    _inherits(MarkerLabelMapTooltip, _React$Component4);

    function MarkerLabelMapTooltip() {
        _classCallCheck(this, MarkerLabelMapTooltip);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(MarkerLabelMapTooltip).call(this));
    }

    _createClass(MarkerLabelMapTooltip, [{
        key: 'render',
        value: function render() {
            var i = this.props.item;
            return React.createElement(
                'div',
                { className: 'markerlabel-maptooltip' },
                i.content
            );
        }
    }]);

    return MarkerLabelMapTooltip;
}(React.Component);

MarkerLabelMapTooltip.create = function (item, markerLabelPanel) {
    var dom = document.createElement('div');
    var content = ReactDOM.render(React.createElement(MarkerLabelMapTooltip, { panel: markerLabelPanel, item: item }), dom);
    content.dom = dom;
    return content;
};