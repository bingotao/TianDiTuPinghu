// @hash v3-10B39BC15E9C1B7EFE7D50AADCB1C0181445B8A0
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:57
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Correcting = function (_React$Component) {
    _inherits(Correcting, _React$Component);

    function Correcting(props) {
        _classCallCheck(this, Correcting);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Correcting).call(this, props));

        var errortypes = {
            '0': '位置错误',
            '1': '名称错误',
            '9': '其他错误'
        };
        _this.errortypes = errortypes;
        _this.layer = props.layer;

        _this.state = {
            poi_id: props.poi_id,
            errortype: errortypes['0'],
            errordescription: '',
            contactinfo: '',
            x: props.x,
            y: props.y
        };
        return _this;
    }

    _createClass(Correcting, [{
        key: 'errorTypeChange',
        value: function errorTypeChange(e) {
            this.setState({
                errortype: e.target.value
            });
        }
    }, {
        key: 'commit',
        value: function commit() {
            var cThis = this;
            $.post('CreateCorrecting', this.state, function (rt) {
                if (rt.ErrorMessage) {
                    _g.fun.showError(rt.ErrorMessage);
                } else {
                    _g.fun.showSuccess('纠错信息已成功反馈，我们将及时处理并反馈！');
                    cThis.layer.remove();
                }
            }, 'json');
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                'div',
                { className: 'correcting' },
                React.createElement(
                    'h3',
                    null,
                    '地图纠错'
                ),
                React.createElement(
                    'h4',
                    null,
                    '错误类型'
                ),
                React.createElement(
                    'div',
                    { className: 'error-types' },
                    React.createElement(
                        antd.Radio.Group,
                        { onChange: this.errorTypeChange.bind(this), value: this.state.errortype },
                        React.createElement(
                            antd.Radio,
                            { value: this.errortypes['0'] },
                            this.errortypes['0']
                        ),
                        React.createElement(
                            antd.Radio,
                            { value: this.errortypes['1'] },
                            this.errortypes['1']
                        ),
                        React.createElement(
                            antd.Radio,
                            { value: this.errortypes['9'] },
                            this.errortypes['9']
                        )
                    )
                ),
                React.createElement(
                    'h4',
                    null,
                    '错误描述'
                ),
                React.createElement('textarea', { className: 'ct-input', type: 'text', placeholder: '错误描述信息', value: this.state.errordescription, onChange: function onChange(e) {
                        return _this2.setState({ errordescription: e.target.value });
                    } }),
                React.createElement(
                    'h4',
                    null,
                    '联系方式'
                ),
                React.createElement('input', { className: 'ct-input', type: 'text', placeholder: '有奖纠错，请留下您的联系方式', value: this.state.contactinfo, onChange: function onChange(e) {
                        return _this2.setState({ contactinfo: e.target.value });
                    } }),
                React.createElement(
                    'div',
                    { className: 'correcting-btns clearfix' },
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                if (_this2.layer) _this2.layer.remove();
                            } },
                        '取消'
                    ),
                    React.createElement(
                        antd.Button,
                        { onClick: this.commit.bind(this), type: 'primary' },
                        '确定'
                    )
                )
            );
        }
    }]);

    return Correcting;
}(React.Component);

Correcting.create = function (layer, poi_id) {
    var dom = document.createElement('div');
    var latlng = layer.getLatLng();
    var correcting = ReactDOM.render(React.createElement(Correcting, { poi_id: poi_id, x: latlng.lng, y: latlng.lat, layer: layer }), dom);
    correcting.dom = dom;
    return correcting;
};