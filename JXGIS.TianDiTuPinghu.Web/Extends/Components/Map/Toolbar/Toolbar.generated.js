// @hash v3-C4B9514D0B0521471870BFCE0550EF494C7447B8
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:59
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toolbar = function (_React$Component) {
    _inherits(Toolbar, _React$Component);

    function Toolbar(props) {
        _classCallCheck(this, Toolbar);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Toolbar).call(this));

        _this.state = {
            vec: props.map.options.currentBaselayer == 'vec',
            anno: props.map.options.showAnno
        };

        _this.options = {
            fullScreen: false
        };
        return _this;
    }

    _createClass(Toolbar, [{
        key: 'baseLayerChange',
        value: function baseLayerChange() {
            var vec = !this.state.vec;
            this.setState({ vec: vec });
            var map = this.props.map;
            if (map) {
                map.showBaselayer(vec ? 'vec' : 'img', this.state.anno);
            }
        }
    }, {
        key: 'annoLayerChange',
        value: function annoLayerChange() {
            var anno = !this.state.anno;
            this.setState({ anno: anno });
            var map = this.props.map;
            if (map) {
                map.showBaselayer(this.state.vec ? 'vec' : 'img', anno);
            }
        }
    }, {
        key: 'toggleFullScreen',
        value: function toggleFullScreen() {
            if (this.props.fullScreenDom) {
                (this.options.fullScreen = !this.options.fullScreen) ? fullScreenApi.requestFullScreen(this.props.fullScreenDom) : fullScreenApi.cancelFullScreen(this.props.fullScreenDom);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var bVec = this.state.vec;

            return React.createElement(
                'div',
                { className: 'toolbar' },
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { onClick: function onClick(e) {
                                return _this2.baseLayerChange();
                            }, style: { borderLeft: '0' }, className: "toolbar-item iconfont " + (bVec ? "icon-iconweixing" : "icon-map") },
                        bVec ? "卫星" : "地图"
                    ),
                    React.createElement(
                        'span',
                        { className: 'toolbar-group' },
                        React.createElement(
                            'span',
                            { onClick: function onClick(e) {
                                    return _this2.annoLayerChange();
                                }, className: "toolbar-item iconfont " + (this.state.anno ? "icon-5" : "icon-fangxingweixuanzhong") },
                            '标注'
                        )
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { onClick: this.props.showServices, className: 'toolbar-item iconfont icon-tuceng' },
                        '综合服务'
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { className: 'iconfont toolbar-item icon-biaoji' },
                        '标记'
                    ),
                    React.createElement(
                        'span',
                        { className: 'toolbar-group' },
                        React.createElement(
                            'span',
                            { onClick: this.props.sharePointClick, className: 'toolbar-item iconfont icon-weizhi' },
                            '标点'
                        ),
                        React.createElement(
                            'span',
                            { onClick: this.props.shareLineClick, className: 'toolbar-item iconfont icon-bianji' },
                            '标线'
                        ),
                        React.createElement(
                            'span',
                            { onClick: this.props.sharePolygonClick, className: 'toolbar-item iconfont icon-weibiaoti104' },
                            '标面'
                        )
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { className: 'toolbar-item iconfont icon-Tool-plane' },
                        '工具'
                    ),
                    React.createElement(
                        'span',
                        { className: 'toolbar-group' },
                        React.createElement(
                            'span',
                            { onClick: this.props.measureLengthClick, className: 'toolbar-item iconfont icon-ceju' },
                            '测距'
                        ),
                        React.createElement(
                            'span',
                            { onClick: this.props.measureAreaClick, className: 'toolbar-item iconfont icon-cemian' },
                            '测面'
                        ),
                        React.createElement(
                            'span',
                            { onClick: function onClick(e) {
                                    window.print();
                                }, className: 'toolbar-item iconfont icon-ordinaryprint' },
                            '打印'
                        ),
                        React.createElement(
                            'span',
                            { onClick: function onClick(e) {
                                    return _this2.props.markerLabelPanel.btnAddClick();
                                }, className: 'toolbar-item iconfont icon-tudingfill' },
                            '标注'
                        )
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { onClick: this.props.clearClick, className: 'toolbar-item iconfont icon-shanchu' },
                        '清除'
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { onClick: function onClick(e) {
                                return _this2.toggleFullScreen();
                            }, className: 'toolbar-item iconfont icon-diannao' },
                        '全屏'
                    )
                ),
                React.createElement(
                    'span',
                    null,
                    React.createElement(
                        'span',
                        { onClick: this.props.fullExtent, className: 'toolbar-item iconfont icon-quanping' },
                        '全图'
                    )
                )
            );
        }
    }]);

    return Toolbar;
}(React.Component);