// @hash v3-34740680959E0EDEABB94066BB2E57EB36B542A5
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:57
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LayerItem = function (_React$Component) {
    _inherits(LayerItem, _React$Component);

    function LayerItem() {
        _classCallCheck(this, LayerItem);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LayerItem).call(this));

        _this.state = {
            checked: false
        };
        return _this;
    }

    _createClass(LayerItem, [{
        key: "toggleCheck",
        value: function toggleCheck() {
            this.setState({
                checked: !this.state.checked
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            return React.createElement(
                "span",
                { onClick: function onClick(e) {
                        return _this2.toggleCheck();
                    }, className: "layer-item " + (this.state.checked ? "active" : "") },
                React.createElement("span", { className: "iconfont " + (this.state.checked ? "icon-5" : "icon-fangxingweixuanzhong") }),
                this.props.name
            );
        }
    }]);

    return LayerItem;
}(React.Component);

var LayerControl = function (_React$Component2) {
    _inherits(LayerControl, _React$Component2);

    function LayerControl() {
        _classCallCheck(this, LayerControl);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(LayerControl).call(this));
    }

    _createClass(LayerControl, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (!L.Browser.webkit) {
                var $scroll = this.$scroll;
                if ($scroll) {
                    $scroll.mCustomScrollbar("scrollTo", "top");
                } else {
                    this.$scroll = $('.layercontrol .layercontrol-container').mCustomScrollbar({
                        theme: "dark-blue",
                        scrollInertia: 0
                    });
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var layers = this.props.layers;

            function getTreeNodes(data) {
                var nodes = [];
                for (var i = 0, l = data.length; i < l; i++) {
                    var item = data[i];
                    var node = null;
                    if (item.children && item.children.length) {
                        node = React.createElement(
                            antd.Tree.TreeNode,
                            { key: item.key, title: item.name },
                            getTreeNodes(item.children)
                        );
                    } else node = React.createElement(antd.Tree.TreeNode, { key: item.key, title: React.createElement(LayerItem, { name: item.name }) });
                    nodes.push(node);
                }
                return nodes;
            }

            var nodes = getTreeNodes(layers);

            return React.createElement(
                "div",
                { className: "layercontrol" },
                React.createElement(
                    "div",
                    { className: "layercontrol-container" },
                    React.createElement(
                        antd.Tree,
                        { defaultExpandAll: true, checkable: false },
                        nodes
                    )
                )
            );
        }
    }]);

    return LayerControl;
}(React.Component);