// @hash v3-92DA2FC2D86E238F474B85C807F6A35832E12D2E
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:46:56
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AreaSearch = function (_React$Component) {
    _inherits(AreaSearch, _React$Component);

    function AreaSearch(props) {
        _classCallCheck(this, AreaSearch);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AreaSearch).call(this));

        var options = {
            defaulteState: {
                distance: 800,
                searchText: ''
            },
            point: null
        };
        _this.options = options;
        _this.state = options.defaulteState;
        return _this;
    }

    _createClass(AreaSearch, [{
        key: 'reset',
        value: function reset() {
            var centerLayer = this.centerLayer;
            var areaSearchLayer = this.areaSearchLayer;
            this.popup = null;
            if (centerLayer) {
                centerLayer.remove();
                centerLayer = null;
            }
            if (areaSearchLayer) {
                areaSearchLayer.remove();
                this.areaSearchLayer = null;
            }
            this.setState(this.defaulteState);
        }
    }, {
        key: 'setPosition',
        value: function setPosition(point) {
            this.options.point = point;
        }
    }, {
        key: 'changeSearchText',
        value: function changeSearchText(text) {
            this.setState({ searchText: text });
        }
    }, {
        key: 'search',
        value: function search() {
            var map = this.props.map;
            var point = this.options.point;
            var radius = this.state.distance;
            var searchText = this.state.searchText;
            var categories = this.options.categories;
            this.reset();

            var areaSearchLayer = L.circle(point, { radius: radius, weight: 1 });
            areaSearchLayer.editing.enable();
            map.drawItems.addLayer(areaSearchLayer);
            this.areaSearchLayer = areaSearchLayer;
            map.areaSearchLayer = areaSearchLayer;

            areaSearchLayer.on('edit', function (cThis, point, searchText, categories) {
                return function (e) {
                    var circle = e.target;
                    var radius = circle.getRadius();
                    var center = circle.getLatLng();
                    $('.leaflet-edit-resize').attr('data-distance', radius.toFixed(0) + '米');
                    cThis.getPOI(false, searchText, center, radius, categories);
                };
            }(this, point, searchText, categories));

            $('.leaflet-edit-resize').attr('data-distance', radius.toFixed(0) + '米');

            this.getPOI(false, searchText, point, radius, categories);
        }
    }, {
        key: 'getPOI',
        value: function getPOI(fitMap, text, center, radius, categories) {
            _g.resultsPanel.getPOI(fitMap, text, categories, 1, center, radius);
            _g.resultsPanel.show();
            _g.poiDetails.hidden();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var opts = this.options;
            var state = this.state;
            return React.createElement(
                'div',
                { className: 'areasearch' },
                React.createElement(
                    'h3',
                    null,
                    '周边搜索'
                ),
                React.createElement(
                    'div',
                    null,
                    React.createElement(
                        antd.Input.Group,
                        null,
                        React.createElement(antd.Input, { placeholder: '请输入关键字...', value: state.searchText, onChange: function onChange(e) {
                                return _this2.changeSearchText(e.target.value);
                            } }),
                        React.createElement(
                            'div',
                            { className: 'ant-input-group-wrap' },
                            React.createElement(
                                antd.Button,
                                { type: 'primary', onClick: this.search.bind(this) },
                                '搜索'
                            )
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'areasearch-btns' },
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                _this2.options.categories = ["120201", "120202", "120204", "140312", "140310", "140311"];_this2.search();
                            }, type: 'primary', size: 'small' },
                        '餐饮'
                    ),
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                _this2.options.categories = ["120101", "120102", "120103"];_this2.search();
                            }, type: 'primary', size: 'small' },
                        '住宿'
                    ),
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                _this2.options.categories = ["160501", "160502"];_this2.search();
                            }, type: 'primary', size: 'small' },
                        '银行'
                    ),
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                _this2.options.categories = ["170105"];_this2.search();
                            }, type: 'primary', size: 'small' },
                        '公交站'
                    ),
                    React.createElement(
                        antd.Button,
                        { onClick: function onClick(e) {
                                _this2.options.categories = ["160301", "160302", "160303", "160304", "150406"];_this2.search();
                            }, type: 'primary', size: 'small' },
                        '医院'
                    )
                )
            );
        }
    }]);

    return AreaSearch;
}(React.Component);

AreaSearch.create = function (map, layer, node) {

    //单例，不存在则创建，存在则返回
    if (!AreaSearch.instance) {
        var dom = node || document.createElement('div');
        var areaSearch = ReactDOM.render(React.createElement(AreaSearch, { map: map }), dom);
        areaSearch.dom = dom;
        AreaSearch.instance = areaSearch;
    }
    areaSearch = AreaSearch.instance;
    areaSearch.reset();

    areaSearch.setPosition(layer.getLatLng());
    areaSearch.centerLayer = layer;
    areaSearch.popup = layer.bindPopup(areaSearch.dom);

    return AreaSearch.instance;
};