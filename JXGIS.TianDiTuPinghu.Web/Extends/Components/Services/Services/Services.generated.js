// @hash v3-54EEAC6B06D31574E77D1E33E5F008AC63035B8C
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.0.1 (build 0) with Babel 6.7.7
// Generated at: 2017/5/3 14:47:01
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

$(init);

var ServicePanel = function (_React$Component) {
    _inherits(ServicePanel, _React$Component);

    function ServicePanel(props) {
        _classCallCheck(this, ServicePanel);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ServicePanel).call(this, props));
    }

    _createClass(ServicePanel, [{
        key: "getCategories",
        value: function getCategories() {
            var categories = [];
            for (var name in this.refs) {
                if (name.startsWith("category")) {
                    var cts = this.refs[name].getCategories();
                    categories = categories.concat(cts);
                }
            }
            return categories;
        }
    }, {
        key: "searchService",
        value: function searchService() {
            var categories = this.getCategories();
            var searchText = this.refs.searchBar.getSearchText();
            var searchResults = this.refs.searchResults;
            searchResults.filter(categories, searchText);
        }
    }, {
        key: "render",
        value: function render() {
            var categories = this.props.categories;
            var cCategories = [];
            for (var i = 0, l = categories.length; i < l; i++) {
                var category = categories[i];
                cCategories.push(React.createElement(ServiceTypeFilter, { search: this.searchService.bind(this), ref: 'category' + i, category: category }));
            }

            var services = this.props.services;

            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "left-side" },
                    cCategories
                ),
                React.createElement(
                    "div",
                    { className: "content-main" },
                    React.createElement(ServiceSearchBar, { search: this.searchService.bind(this), ref: "searchBar" }),
                    React.createElement(ServiceResults, { ref: "searchResults", services: services })
                )
            );
        }
    }]);

    return ServicePanel;
}(React.Component);

function init() {
    var categories = config.categories;

    cServicePanel = ReactDOM.render(React.createElement(ServicePanel, { categories: categories, services: [] }), document.getElementById('content'));
    cServicePanel.searchService();
}